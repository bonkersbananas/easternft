---
name: Deploy contracts to testnet

on:
  workflow_dispatch:
    inputs:
      deploy_network:
        type: choice
        description: Deploy to network
        required: true
        default: 'Polygon Mumbai - Testnet'
        options:
        - 'Polygon Mumbai - Testnet'

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Compile and deploy
    steps:
    - name: Set values
      id: values
      run: |
        echo ; \
        DEPLOY_NETWORK= ; \
        if [ -z $INPUT_DEPLOY_NETWORK ]; then INPUT_DEPLOY_NETWORK="Polygon Mumbai - Testnet"; fi ; \
        if [[ "$INPUT_DEPLOY_NETWORK" == "Polygon Mumbai - Testnet" ]]; then DEPLOY_NETWORK=maticmum; EXPLORER_HOST=mumbai.polygonscan.com; CHAIN_ID=80001; fi ; \
        if [ -z $DEPLOY_NETWORK ]; then exit 1; fi ; \
        echo "::set-output name=deploy_network::$DEPLOY_NETWORK" ; \
        echo "::set-output name=chain_id::$CHAIN_ID" ; \
        echo "::set-output name=explorer_host::$EXPLORER_HOST"
      env:
        INPUT_DEPLOY_NETWORK: ${{ github.event.inputs.deploy_network }}
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Install npm packages
      run: npm install
    - name: Compile solidity contracts
      run: rm -rf artifacts ; npx hardhat compile
      env:
        API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        API_URL: ${{ secrets.ALCHEMY_API_URL }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        DEPLOY_NETWORK: ${{ steps.values.outputs.deploy_network }}
    - name: Deploy contract to blockchain
      id: deploy
      run: |
        set -e pipefail ; \
        npx hardhat run scripts/deploy.js | sed 's/^/::set-output name=contract_address::/' ; \
        TZ=UTC date +"%Y-%m-%dT%H:%M:%S.%6N"Z | sed 's/^/::set-output name=deploy_timestamp::/'
      env:
        API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        API_URL: ${{ secrets.ALCHEMY_API_URL }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        DEPLOY_NETWORK: ${{ steps.values.outputs.deploy_network }}
    - name: Wait 60 seconds for block confirmations
      run: |
        echo ; \
        echo "··· ⏳ waiting 60 seconds" && \
        sleep 60
    - name: Verify contract code on Etherscan / Polygonscan
      run: |
        echo ; \
        (echo "··· 👀 verify attempt: #1" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ⏳ waiting 10 seconds" && sleep 10 && echo "··· 👀 verify attempt: #2" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ⏳ waiting 15 seconds" && sleep 15 && echo "··· 👀 verify attempt: #3" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ⏳ waiting 20 seconds" && sleep 20 && echo "··· 👀 verify attempt: #4" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ⏳ waiting 30 seconds" && sleep 30 && echo "··· 👀 verify attempt: #5" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ❌ fail: verify error" && exit 1)
      env:
        API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        API_URL: ${{ secrets.ALCHEMY_API_URL }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        CONTRACT_ADDRESS: ${{ steps.deploy.outputs.contract_address }}
        DEPLOY_NETWORK: ${{ steps.values.outputs.deploy_network }}
    - name: Deploy complete - output paths
      run: |
        echo ; \
        echo "contract  ->  $CONTRACT_ADDRESS" ; \
        echo "explorer  ->  https://$EXPLORER_HOST/address/$CONTRACT_ADDRESS#code"
      env:
        CONTRACT_ADDRESS: ${{ steps.deploy.outputs.contract_address }}
        EXPLORER_HOST: ${{ steps.values.outputs.explorer_host }}
        DEPLOY_NETWORK: ${{ steps.values.outputs.deploy_network }}
    - name: Commit deployed artifacts
      run: |
        set -e pipefail ; \
        if [[ ! "$DEPLOY_NETWORK" ]]; then exit 1; fi ; \
        rm -rf deployments/$DEPLOY_NETWORK/artifacts ; \
        mkdir -p deployments/$DEPLOY_NETWORK ; \
        cp -R artifacts deployments/$DEPLOY_NETWORK/ ; \
        git config --global user.name 'github-actions[bot]' ; \
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com' ; \
        cat deployments/addresses.js \
          | jq ".network.$DEPLOY_NETWORK.contract_address |= \"$CONTRACT_ADDRESS\"" \
          | jq ".network.$DEPLOY_NETWORK.git_branch |= \"`git rev-parse --abbrev-ref HEAD`\"" \
          | jq ".network.$DEPLOY_NETWORK.git_commit_hash |= \"\"" \
          | jq ".network.$DEPLOY_NETWORK.deploy_timestamp |= \"$DEPLOY_TIMESTAMP\"" ; \
        git add deployments/addresses.js deployments/$DEPLOY_NETWORK/artifacts ; \
        git commit -m "Deployed contracts via github action (1/2 - artifacts)" ; \
        cat deployments/addresses.js \
          | jq ".network.$DEPLOY_NETWORK.git_commit_hash |= \"`git rev-parse HEAD`\"" ; \
        git add deployments/addresses.js ; \
        git commit -m "Deployed contracts via github action (1/2 - contract address)" ; \
        git push
      env:
        CONTRACT_ADDRESS: ${{ steps.deploy.outputs.contract_address }}
        DEPLOY_NETWORK: ${{ steps.values.outputs.deploy_network }}
        DEPLOY_TIMESTAMP: ${{ steps.deploy.outputs.deploy_timestamp }}
