---
name: Deploy contracts to testnet
on: [workflow_dispatch]

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Compile and deploy
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Install npm packages
      run: npm install
    - name: Compile solidity contracts
      run: npx hardhat compile
      env:
        API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        API_URL: ${{ secrets.ALCHEMY_API_URL }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
    - name: Deploy contract to blockchain
      id: deploy
      run: |
        set -e pipefail ; \
        npx hardhat run scripts/deploy.js | sed 's/^/::set-output name=contract_address::/'
      env:
        API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        API_URL: ${{ secrets.ALCHEMY_API_URL }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
    - name: Wait 60 seconds for block confirmations
      run: |
        echo ; \
        echo "··· ⏳ waiting 60 seconds" && \
        sleep 60
    - name: Verify contract code on Etherscan / Polygonscan
      run: |
        echo ; \
        (echo "··· 👀 verify attempt: #1" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ⏳ waiting 10 seconds" && sleep 10 && echo "··· 👀 verify attempt: #2" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ⏳ waiting 15 seconds" && sleep 15 && echo "··· 👀 verify attempt: #3" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ⏳ waiting 20 seconds" && sleep 20 && echo "··· 👀 verify attempt: #4" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ⏳ waiting 30 seconds" && sleep 30 && echo "··· 👀 verify attempt: #5" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -iE '(reason: already verified|successfully verified|contract source code already verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "··· ✅ verification ready"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "··· ✅ verification ready") || \
        (echo "··· ❌ fail: verify error" && exit 1)
      env:
        API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        API_URL: ${{ secrets.ALCHEMY_API_URL }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        CONTRACT_ADDRESS: ${{ steps.deploy.outputs.contract_address }}
    - name: Deploy complete - output paths
      run: |
        echo ; \
        echo "contract  ->  $CONTRACT_ADDRESS" ; \
        echo "explorer  ->  https://$EXPLORER_HOST/address/$CONTRACT_ADDRESS#code"
      env:
        CONTRACT_ADDRESS: ${{ steps.deploy.outputs.contract_address }}
        EXPLORER_HOST: mumbai.polygonscan.com
