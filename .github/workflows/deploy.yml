---
name: Deploy contracts to Polygon testnet
on: [workflow_dispatch]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: setup node
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: npm install
      run: npm install
    - name: Compile
      run: npx hardhat compile
    - name: deploy contract
      id: deploy
      run: set -e pipefail ; npx hardhat run scripts/deploy.js | sed 's/^/::set-output name=contract_address::/'
      env:
        API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        API_URL: ${{ secrets.ALCHEMY_API_URL }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
    - name: (output) contract address
      run: echo $CONTRACT_ADDRESS
      env:
        CONTRACT_ADDRESS: ${{ steps.deploy.outputs.contract_address }}
    - name: waiting 30 seconds for block confirmations
      run: sleep 30
    - name: verify contract code
      run: |
        (echo "-- verify attempt: #1 --" && npx hardhat verify $CONTRACT_ADDRESS && "-- verification ready --") || \
        (echo "-- waiting 10 seconds --" && sleep 10 && echo "-- verify attempt: #2 --" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -E '(Reason: Already Verified|Successfully verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "-- verification ready --"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "-- verification ready --") || \
        (echo "-- waiting 10 seconds --" && sleep 10 && echo "-- verify attempt: #3 --" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -E '(Reason: Already Verified|Successfully verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "-- verification ready --"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "-- verification ready --") || \
        (echo "-- waiting 10 seconds --" && sleep 10 && echo "-- verify attempt: #4 --" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -E '(Reason: Already Verified|Successfully verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "-- verification ready --"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "-- verification ready --") || \
        (echo "-- waiting 10 seconds --" && sleep 10 && echo "-- verify attempt: #5 --" && cmd_output=$(npx hardhat verify $CONTRACT_ADDRESS 2>&1); cmd_exit_code=${PIPESTATUS[0]}; if [[ "$cmd_exit_code" -eq 0 ]] || grep -E '(Reason: Already Verified|Successfully verified)' <<< "$cmd_output" > /dev/null; then echo "$cmd_output"; echo "-- verification ready --"; exit 0; fi; echo "$cmd_output" && [[ "$cmd_exit_code" -eq 0 ]] && echo "-- verification ready --") || \
        (echo "-- verify failed --" && exit 1)
      env:
        CONTRACT_ADDRESS: ${{ steps.deploy.outputs.contract_address }}
#        INFURA_ID: ${{ secrets.INFURA_ID }}
#        INFURA_SECRET: ${{ secrets.INFURA_SECRET }}
#        INFURA_API_ENDPOINT: ${{ secrets.INFURA_API_ENDPOINT }}